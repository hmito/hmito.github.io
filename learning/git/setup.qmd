---
title: 環境構築
format:
  html:
    toc: true
execute: 
  eval: false
---
```{r}
#| echo: false
#| eval: false
```

まず、gitを操作するためのGitアプリ、gitクライアントとして使うためにVisual Studio Codeをインストールします。また、VSCodeを使いやすくするために、拡張機能として**Git Graph**と**Git History**を導入し、いくつかの設定も変更します。

## gitとgitクライアントの用意
gitを操作するためには、**Git**アプリが必要となります。[公式Webサイト](https://git-scm.com/)からインストーラーをダウンロードしてきてもよいですが、以下のような`winget`（Windows）あるいは`brew`（macOS）を使ったインストールが簡単です。

::: {.panel-tabset}

### Windowsの場合
スタートメニューで**Power Shell**と検索し、出てきたアプリを実行してください。開いた画面で、以下のコマンドを入力し、最後にエンターキーをおしてください。

```{bash}
winget install Git.Git
```

### Macの場合
[homebrew](https://brew.sh)をインストール後、ターミナルで以下のコマンドを入力し、最後にエンターキーをおしてください。

```{bash}
brew install git
```

:::

:::{.callout-note}
上手くいかなければ、以下のWebサイトからもインストール可能です。<br/>
[https://git-scm.com](https://git-scm.com/)
:::

次に、gitクライアントです。この解説記事では、**Visual Studio Code** (以下VSCode)を使用します。VSCodeは、エディタ（ソースコードを書くためのソフト）として極めて優秀ですが、ここでは、gitの管理用に用意します。

[別記事（VSCodeの使い方）](../vscode.qmd)としてまとめてありますので、この記事を参考にインストールしてください。

## VSCodeへの拡張機能の導入
次に、VSCodeでGitを使うための設定を行います。

VSCodeは、拡張機能と呼ばれるアドインを入れることで、より使いやすくなります。Gitを使いやすくするために、二つの拡張機能を入れます。

一つ目は、**Git Graph**です。これは、Gitの変更履歴全体をより視覚的に分かりやすくしてくれます。左メニューから拡張機能ボタン（4つの四角マーク）を選びます。検索窓で**Git Graph**を検索し、出てきた一番上の機能を拡張機能をインストールを押してください。

![](rsc/vscode_extension.png)

表示されていた「インストール」の表示が消えれば完了です。

二つ目は、**Git History**です。こちらは、個別のファイルの変更履歴をより分かりやすくしてくれます。同じく検索窓で**Git History**を検索し、出てきた一番上の機能を拡張機能をインストールを押してください。

## Gitの初期設定
次に、Gitの初期設定を行います。VSCodeで適当なフォルダを開き、左メニューから丸三つが線でつながれた「ソース管理」のボタンを押と、ソース管理画面が開きます。最初は「リポジトリを初期化する」と出てくるので、クリックします（「Branchの発行」など違う表示が出てきた場合はこの手順は飛ばしてかまいません）。

![](rsc/gitinit1.png)

次に、ソース管理画面の右上にある「・・・」をクリックし、「リポジトリ」「変更」「グラフ」のうち変更以外のチェックを外しておきましょう（「表示」「表示と並べ替え」など違う表示が出てきた場合はこの手順は飛ばしてかまいません）。

![](rsc/gitinit1.5.png)


ソース管理の画面の右上に、縦線がいくつか並んでいる「View GitGraph」ボタンがあるのでこれを押しましょう。GitGraphの画面が開きます。おそらくこの時点では「コミットがない Unable to load commits」というエラーが出てきますが、無視して「Dismiss」を押しましょう。

![](rsc/gitinit2.png)

開いたGitGraph画面の右上、歯車マークを押すと、設定画面 Repository Settings が開きます。

Gitを使用する際はユーザーネームとメールアドレスの登録が必要です（後ほど説明しますが、オンラインサーバー上で公開する設定にしない限り、このユーザーネーム・アドレスが他者に公開されることはありません）。これは、複数人で作業する場合に「誰が何を変更したか」を明確にするためのものです。

中ほどにあるUser Details の部分に自分の名前やメールアドレスが表示されていなければ、「Add User Details」を押して表示される画面にユーザーネーム、メールアドレスを入力し、「Use Globally」にチェックが入っていることを確認して「Set User Details」を押しましょう。ユーザーネームは本名でなくニックネーム等でも構いませんが、他者が分かるものにしましょう。

![](rsc/gitinit3.png)

これで、Gitの初期設定は完了です。

:::{.callout-note}
gitの初期設定（氏名とアドレスの設定）は**Power Shell**やターミナルから設定することも可能です。以下のようなコマンドでユーザーネーム、メールアドレスを設定します。

```{bash}
git config --global user.name "適当なユーザーネーム"
git config --global user.email "mail_adress@mail.com"
```

:::

## VSCodeのカスタマイズ
VSCodeでGitを使いやすくするため、少しVSCodeの設定を操作します。

まず、上部メニューの「ファイル」→「ユーザー設定」→「設定」を選択し、設定画面を開きます。

![](rsc/autofetch1.png)

続いて、設定画面上部にある検索窓に「autofetch」と入力してください。

![](rsc/autofetch2.png)

すると、「Git: Autofetch」という項目が出てくるので、trueを選択しておきましょう。

同じく、設定画面上部にある検索窓に「Git Show Action Button 」と入力してください。

![](rsc/autofetch3.png)

3つのチェックボックスが並んでいる二つ目、「追跡リモートブランチがない場合に・・・(publish)」と書かれている項目のチェックは外しておきましょう。

以上で、VSCodeの初期設定は完了です。特に保存ボタンはないので、このまま設定画面は消して構いません。

## ホスティングサービスのアカウントの用意

:::{.callout-note}
この項目は、オンラインサーバーとの同期機能を使わない限り、スキップして構いません。
:::

最後に、オンラインサーバーを提供しているホスティングサービスにアカウントを作成しましょう。ここでは、GitHubのアカウントの作り方を例に挙げます。

[GitHub公式サイト](https://github.com/)を開き、右上の「Sign up」を押します。

![](rsc/github_singup1.png)

開いた画面でメールアドレス、パスワード、ユーザーネームを選びます。ユーザーネームは英数字とハイフンのみが使用できます。

![](rsc/github_singup2.png)

Continueを押した後は、指示に従いましょう。画像認証後、メールアドレスに届くコードを入力するように求められるはずです。

最後に、登録したユーザーネームとパスワードでログインできれば完了です。

```{=html}
<div class="prev-next-link">
  <a class="prev-link" href="concept.html">
    <p class="prev-next-label">prev</p>
    <p>gitの考え方</p>
  </a>
  <a class="next-link" href="commit.html">
    <p class="prev-next-label">next</p>
    <p>コミットと変更履歴</p>
  </a>
</div>
```
