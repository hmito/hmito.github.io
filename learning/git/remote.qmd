---
title: サーバーとの同期
format:
  html:
    toc: true
execute: 
  eval: false
---

```{r}
#| echo: false
#| eval: false
```

このページでは、ブランチにならぶ重要な機能であるサーバーとの同期についてみていきます。

## なぜサーバーが必要か

gitによる重要な機能の一つは、サーバーとの同期です。サーバーを使うことの目的は大きく以下の4つです。

- バックアップ：PCの記録が失われたとしても容易に復元可能。
- PC間の同期：複数のPCの間で、作業環境を同期。
- チーム開発：複数メンバーでの共同開発に際してコード・履歴を共有。
- 公開：ソースコードやドキュメントを容易に一般公開・配布できる。

サーバーは自前のものを用意することもできますが、一般には[ホスティングサービス](concept.qmd)と呼ばれるgitサーバーを利用します。

※ 事前に[環境構築](setup.qmd)などを参考に、GitHubなどgitサーバーのアカウントを作成しておいてください。

## リモートの紐付け方法（3つのケース）

### ケース1：ローカルにコードあり、リモートを後から作成

1. GitHubなどで新しいリポジトリを作成（ローカルのフォルダ名と一致させると管理が容易）
2. 公開設定（Public／Private）を選択
3. 作成後に表示されるURLをコピー
4. VSCodeで「リモートの追加」からURLを登録
5. `git push` でブランチをリモートへ送信

---

### ケース2：最初からリモートを使って開発開始

1. GitHubで事前にリポジトリを作成（名前・公開設定はケース1と同様）
2. URLをコピー
3. VSCodeで「Clone」操作を実施 → リポジトリ内容がローカルに複製される
4. ローカルにファイルを追加・編集しながら作業を開始

---

### ケース3：既にリモートに存在するプロジェクトを取得

1. リモートリポジトリのURLをコピー（自分または他人のリポジトリ）
2. VSCodeで「Clone」操作を実施
3. ローカル環境に複製 → 編集・更新が可能に

---

## Push・Pullの基本操作とタイミング

| 操作 | 内容 | 実行するタイミング |
|------|------|------------------|
| Push | ローカルの履歴をサーバーへ送信 | ローカルが先行しているとき |
| Pull | サーバーの履歴をローカルへ取得 | サーバーが先行しているとき |

※ 操作単位は「ブランチ」

---

## Git Graphで確認できる6つの状態

1. ローカルとリモートが一致（縦棒）
2. ローカルが進行 → Pushが必要
3. リモートが進行 → Pullが必要
4. 双方が枝分かれ（コンフリクトの可能性） → Pull→Conflict解決→Push
5. ローカルにのみブランチあり → Pushで作成
6. リモートにのみブランチあり → Checkoutで取得

---

## Fetchとは何か

- リモートの更新状況のみ取得
- ファイルやブランチの履歴には影響なし
- 実行は軽量でVSCodeでは自動設定（Auto Fetch）が推奨される

---

## 注意点（チーム開発時）

- リモートブランチの削除は慎重に（他人の環境へ影響を与える可能性あり）
- 同名ブランチを再作成することで履歴が混乱する可能性がある
- リセット操作も危険なため、用途を理解したうえで実施すること

---

## 補助機能

### スタッシュ（Stash）

- コミット前の変更を一時的に保管
- ブランチ切り替え時に便利
- ローカル専用（リモートには反映されない）
- Popで復元、Dropで破棄可能

---

### リセット（Reset）

- ブランチの履歴を過去の状態へ戻す
- 主に「Mixed」と「Hard」が使われる
- 操作の意味と影響をよく理解して使用すること

```{=html}
<div class="prev-next-link">
    <a class="prev-link" href="merge.html">
        <p class="prev-next-label">prev</p>
        <p>マージとコンフリクト</p>
    </a>
  <a class="up-link" href="../git.html">
        <p class="prev-next-label">up</p>
        <p>git入門</p>
    </a>
    <a class="next-link" href="useful.html">
        <p class="prev-next-label">next</p>
        <p>便利な機能</p>
    </a>
</div>
```