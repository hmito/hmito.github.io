---
title: サーバーとの同期
format:
  html:
    toc: true
execute: 
  eval: false
---

```{r}
#| echo: false
#| eval: false
```

このページでは、ブランチにならぶ重要な機能であるサーバーとの同期についてみていきます。

## なぜサーバーが必要か

gitによる重要な機能の一つは、サーバーとの同期です。サーバーを使うことの目的は大きく以下の4つです。

- バックアップ：PCの記録が失われたとしても容易に復元可能。
- PC間の同期：複数のPCの間で、作業環境を同期。
- チーム開発：複数メンバーでの共同開発に際してコード・履歴を共有。
- 公開：ソースコードやドキュメントを容易に一般公開・配布できる。

サーバーは自前のものを用意することもできますが、一般には[ホスティングサービス](concept.qmd)と呼ばれるgitサーバーを利用します。

※ 事前に[環境構築](setup.qmd)などを参考に、GitHubなどgitサーバーのアカウントを作成しておいてください。

## サーバー同期に必要なコマンド

Gitでサーバーとコードを同期させるには、主に以下の2種類のコマンドを使用します：

- `git push`：ローカル（手元のパソコン）にあるコミットをサーバーへアップロードする操作。
- `git pull`：サーバーにしか存在しないコミットを、ローカルに取得する操作。

これらは手動で行うことが前提となっており、自動保存ではなく明示的な操作が必要です。  
これは、予期せぬファイルの上書きや更新を防ぐための設計思想によるものです。

## コマンドの動作原理

- `push`：ローカルのコミットを、サーバー上の同じブランチに送信する。
- `pull`：サーバー上のコミットを、ローカルの同じブランチに反映する。

いずれの操作も、**現在のブランチ（HEADのあるブランチ）に対して行われる**点が重要です。  
つまり、`main`ブランチにいる場合は、`main`ブランチに対して`push`や`pull`を行います。  
すべてのコミットが一括で対象になるわけではなく、あくまでブランチ単位での処理です。

## fetchについて

Gitには、`git fetch`というコマンドも存在します。これは：

- サーバーの最新の状態（履歴情報など）をローカルに取得する。
- 実際のファイルや履歴の反映は行われない（＝同期はされない）。

Visual Studio Codeなどの統合開発環境（IDE）では、**オートフェッチ機能**が有効になっている場合があります。  
この場合、裏で自動的にfetchが行われるため、手動操作は不要です。  
ただし、コマンドラインや他のツールを使う場合には、必要に応じて`fetch`を実行して最新の状態を確認しましょう。

## まとめ

Gitによるサーバーとの同期は以下のような構成になります：

- 手元の変更 → `commit`
- サーバーへアップロード → `push`
- サーバーから取得 → `pull`
- 状況の確認（非同期）→ `fetch`

いずれも意図的・明示的に操作することで、安定したバージョン管理とコード共有が可能になります。


## initする

## cloneする



## どんなふうに使う？
gitを使うイメージを少し書いてみます。gitは特定のフォルダを対象にバージョン管理を行います。このバージョン管理の単位を「リポジトリ」と呼びます。

さて、あるフォルダをgitで管理させたいと考えたとすると、以下の操作を行います。

1. まず、そのフォルダを指定してgitを初期化＝「このフォルダの中をgitとして管理することを宣言」（init）します。これで、このフォルダは「リポジトリ」として扱えるようになります。
	- initすることで、フォルダ内部にgitに必要なファイル群が隠しフォルダ内に生成されます。
1. 普通にプログラムを書き、保存する作業内容を選択（stage）し、タイトルをつけて保存（commit）します。
1. 後は必要に応じて、

```{r}
print("hello")
```

gitを使う上で基本的には、5つの操作がある。

1. clone：サーバーから新しくローカルにリポジトリをダウンロードしてくる
1. fetch：バージョンの履歴（セーブポイントの情報）を最新にする
1. pull：サーバーからローカルへ、最新のバージョンをダウンロードする
1. stage & commit：セーブポイントを新しくローカルに作る
1. push：ローカルからサーバーへ、最新のバージョンをアップロードする



git自体はサービスの名前というよりソフトの種類といった方がよい）。

基本的に、2-5の繰り返しでバージョンを更新していく。



```{=html}
<div class="prev-next-link">
    <a class="prev-link" href="merge.html">
        <p class="prev-next-label">prev</p>
        <p>マージとコンフリクト</p>
    </a>
  <a class="up-link" href="../git.html">
        <p class="prev-next-label">up</p>
        <p>git入門</p>
    </a>
    <a class="next-link" href="useful.html">
        <p class="prev-next-label">next</p>
        <p>便利な機能</p>
    </a>
</div>
```