---
title: gitの考え方
format:
  html:
    toc: true
execute: 
  eval: false
---


## gitとは？
gitは、ソースコードやテキスト、htmlファイルなど「文字」で記述するファイルの変更履歴を管理するために広く使われている、バージョン管理ツールです。

使い方は簡単です。任意のフォルダをgitに管理させると、そのフォルダ内の全てのファイルの変更を自動的に検出してくれるようになります。ユーザーがやることは、変更内容ごとに簡単なタイトルを付けて保存（commitと呼びます）していくだけです。これだけで、

- 以前保存（commit）した任意のタイミングにフォルダの中身を戻す
- 特定の時期に行った変更のみを取り消す
- 特定のファイルの変更履歴を調べる

といったことができます。

さらに、オンラインサーバーと同期させることで、

- 新しいPCからでも簡単に作業中のフォルダを復元するなど、バックアップ代わりになる
- 複数人で同時にファイルを編集できる

もできるようになります。

## オンラインストレージと同じ？
これらの機能は、GoogleDriveやDropboxのようなオンラインストレージサービスとも類似していますが、gitには以下の特徴があります。

- 極めて軽量。アプリとして常駐することはなく、ほとんどの機能はオンライン環境も必要としない。
- 「ファイル自体」ではなく「変更履歴」の保存に特化しているため、「特定の期間にどのファイルが変更されたか」「このファイルはいつどこが書き換えられたか」等が簡単にわかる。
- 履歴を「枝分かれ」させて、複数のバージョンを管理する機能が充実しており、同時並行で開発したり、一方のバージョンでの変更を他方へ丸ごと反映したりできる。
- テキスト形式ファイルに特化しているため、画像ファイルや音楽ファイルなどの「文字」ではないデータの保存は不得手（不可能ではないが、変更を重ねると動作が重くなる）。

## 何が嬉しい？
上記の特徴は研究ではあまり有用でないように思うかもしれませんが、実は様々な面でメリットがあります。

- 新しいアイデアを試すとき、躊躇なく既存のシミュレーション用のソースコードを上書きできる。もし失敗してもすぐ元通り。
- 「機能を追加するコードも書きたいけど、今はとりあえずシミュレーションを走らせないと」というときも安心。機能追加用とシミュレーション用に履歴を「枝分かれ」させれば、シミュレーションを走らせつつ時間ができたときに機能追加の作業に戻れる。
- 急に動かなくなったとき、あるいは計算にバグが見つかったときに、「動いているときから何を変更したか」「いつからそのバグがあったか」を後で簡単に調べることができる。
- 研究過程、すなわち「いつ何をやったのか」を逐一記録する実験ノート代わりになる。
- 研究論文を公開する際にはgit上で論文に使った即プログラムを公開できる。
- 複数人で協力してプログラムを書いたりできる。「他の人はどんなふうに書き換えた？」「どのくらい今進んでそう？」といったことが一目でわかる。

使い捨てのコードを除けば、研究で使用するコードは全てgitに管理させるべきだと言えます。

:::{.callout-note}
## 余談：gitという言葉がさすもの
ややこしいですが「git」という言葉は、いくつかの意味で使われます。

#### 規格としての「git」
バージョン管理ツールgit

#### アプリとしての「git」

#### サーバーのサービス名としての「git」

:::

```{=html}
<div class="prev-next-link">
	<a class="next-link" href="setup.html">
		<p class="prev-next-label">next</p>
		<p>環境構築</p>
	</a>
</div>
```
