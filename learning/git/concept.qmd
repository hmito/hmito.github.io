---
title: gitの考え方
---

## 基本的な考え方
gitは、特定のディレクトリの中身についてバージョン管理を行います。このバージョン管理の単位を「リポジトリ」と呼びます。

バージョン管理といっても、定期的にバックアップを取ってくれるようなことはなく、セーブポイントは手動で作る（コミットと呼ばれる）必要があります。

:::{.callout-note}
これは、ファイルが中途半端な状況で大量のセーブポイントが作られないようにするためである。
:::

## gitとオンラインストレージの比較
バックアップやオンラインストレージの「ファイル履歴」の機能とも似ていますが、gitには以下の特徴があります。

- バージョンごとに何を変更したについてのメモ書きを残すことができます。
- 履歴を「枝分かれ」させて、複数のバージョンを同時並行で開発したり、あとでまた合体させて両方に変更内容を繁栄したりできます。
- 「この時期からこの時期の間にどの部分が変更されたか」「このファイルはいつどこが書き換えられたか」を簡単に調べることができます。
- 複数人での共同作業が行いやすいよう設計されています。

これらは、いずれもプログラミングにおいて非常に重要な機能でありで、ある程度複雑なプログラムを書く上ではなくてはならないツールです。


似たような機能として、OneDriveやDropboxなどのオンラインストレージにも「過去の状態に戻す」機能がありますが、それらと比較するとgitは以下の点に特徴があります。

- 多くのオンラインストレージはフォルダの中身のスナップショットを保存しています。一方、gitではファイルの差分、つまり「何が変更されたか」を保存しています。このため、「この時期からこの時期の間にどの部分が変更されたか」「このファイルはいつどこが書き換えられたか」を簡単に調べることができます。
- 履歴の保存は自動ではなく手動です。これは、一見不便なように思うかもしれませんが、「作業途中に勝手に保存される」ことがなく、また変更内容について簡単なタイトルをつけられるため、後から見たときに変更内容を追いかけやすくなっています。
- 複数人での共同作業が行いやすいよう設計されています。「気が付かない間に他の人に書き換えられていた」
- テキスト形式のファイルに特化しています。このため、画像ファイルなどを管理させるのには向きませんが、

このページでは簡単なgitの用語と使い方について説明する。

## gitの基本的な考え方
プログラムのソースコードやテキストを管理するために広く使われている、バージョン管理システムの規格の名前である（つまりgit自体はサービスの名前というよりソフトの種類といった方がよい）。


gitは、ローカル環境だけでなく、サーバー環境にもリポジトリを置くことができる。サーバーに置くことで、バックアップが取れるだけでなく、複数の人が同時に編集作業をできたり、このEESpediaのようなWebサイトを作るなど、サーバー側のサービスを利用することができる。このローカルとサーバーの間のバージョンの同期についても、手動で行う必要がある。

## gitの基本操作
gitを使う上で基本的には、5つの操作がある。

1. clone：サーバーから新しくローカルにリポジトリをダウンロードしてくる
1. fetch：バージョンの履歴（セーブポイントの情報）を最新にする
1. pull：サーバーからローカルへ、最新のバージョンをダウンロードする
1. stage & commit：セーブポイントを新しくローカルに作る
1. push：ローカルからサーバーへ、最新のバージョンをアップロードする

基本的に、2-5の繰り返しでバージョンを更新していく。

## gitとサービス
Gitとは、プログラムやドキュメントなど、様々なファイルの「バージョンを管理」するためのツールです。作業するたびにフォルダの中身を記録しておき、



Gitの特徴：

履歴管理：作業履歴を保存するので、変更内容や修正履歴をいつでも確認できます。

共同作業：複数の人が同じプロジェクトで作業する際に、変更の衝突を防ぎながらスムーズに進められます。

バックアップ：作業内容を定期的に保存することで、万が一のデータ消失にも対応できます。

Gitを使うメリット
失敗しても安心：誤った操作や失敗があっても、過去の状態に戻ることができます。これにより、作業に対するストレスが減り、試行錯誤しやすくなります。

効率的な記録管理：どの段階で、どのような変更を行ったかが分かるので、必要に応じて履歴を確認したり比較したりできます。

チームでの作業が容易：プロジェクトを複数人で進める際に、誰がどんな変更を加えたのかを明確にし、作業の衝突を防ぎます。


履歴管理：作業履歴を保存するので、変更内容や修正履歴をいつでも確認できます。

共同作業：複数の人が同じプロジェクトで作業する際に、変更の衝突を防ぎながらスムーズに進められます。

バックアップ：作業内容を定期的に保存することで、万が一のデータ消失にも対応できます。

Gitを利用すると、自分の作業内容を管理しやすくなり、特に複雑なプロジェクトでの効率が上がります。

もしさらに詳しい使い方や例を知りたければ、ぜひ教えてください！

もう少し詳しくお願いします。
了解しました！もう少し詳しくGitを解説します。

Gitの基本概念
Gitは、「分散型バージョン管理システム」と呼ばれるもので、変更履歴を記録し、管理するための仕組みです。分散型というのは、複数のコンピュータに作業内容を保存できることを意味し、インターネット環境がない場所でも操作が可能です。

具体的には、Gitを使うことで以下が可能になります：

コードの履歴管理：プロジェクトの変更内容（コードの追加、修正、削除など）が記録されるので、どのように進化したかを追跡できます。

ブランチ機能：作業の「枝分かれ」を作成できます。例えば、新しい機能を開発する際に元のコードとは別のブランチを作り、影響を与えずに試行錯誤できます。

マージ機能：ブランチで作業した内容を元のコードに統合する（マージする）ことができます。

共同作業：複数人で同じプロジェクトを効率よく管理できる仕組みを提供します。

Gitを使った典型的な流れ
プロジェクトを開始し、Gitで管理する（git init）。

作業内容をファイルとして追加・編集する。

変更内容をステージ（git add）し、コミット（git commit）する。

必要に応じてブランチを作成し、独立して作業する。

チームと連携する場合は、リモートリポジトリ（例：GitHub）と同期させる。

Gitを使うメリット
作業内容を安全に管理：変更履歴がしっかり保存され、誤操作しても過去の状態に戻せます。

チームでの効率的な作業：複数人の変更をスムーズに統合でき、衝突を防げます。

バージョン比較が可能：変更の詳細を比較し、問題を素早く特定できます。

Gitを理解して使いこなせると、作業効率が大幅にアップします。もし、具体例や手を動かして学べる方法について興味があれば、ぜひ教えてください！さらに掘り下げた情報をお伝えしますよ。