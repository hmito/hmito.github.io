---
title: コミットと変更履歴
format:
    html:
        toc: true
execute:
    eval: false
---

```{r}
#| echo: false
#| eval: false
"https://bonjin-ultra.com/take1.htm"
```

実際にgitの使い方を見ていきます。

## リポジトリの初期化
gitにおけるバージョン管理の単位はフォルダです。任意のフォルダを指定すると、そのフォルダ内の全てのファイルについてバージョン管理を行います。この**バージョン管理の単位を「リポジトリ」と呼びます**。通常は、プログラムごと、あるいはプロジェクトごとに一つのリポジトリを作ることが多いでしょう（裏を返すと、一つのプロジェクトに関連するファイルは全て一つのフォルダ内に収めることを想定している、とも言えます）。

**gitで新たなフォルダのバージョン管理を始めるには、そのフォルダにおいて「リポジトリの初期化」処理が必要**です。この操作は、新しいフォルダをバージョン管理の対象にするたびに一度だけ実行する処理です。

VSCodeでは、gitに関連した操作は左メニューにある、丸三つが線でつながれたマークの「ソース管理」アイコンから行います。操作は以下の通りです。

1. まず、VSCodeを使ってバージョン管理の対象とする[フォルダを開く](../vscode.qmd)。
1. 左メニューから「ソース管理」（丸三つが線でつながれたボタン）を開く。
1. ソース管理画面に表示されている「リポジトリを初期化する」ボタンを押すと、表示が「Branchの発行」と切り替わる。これで初期化完了。
    - git用にリポジトリがすでに初期化されている場合、ボタンは表示されない。

## ファイルの変更
リポジトリの初期化が済めば、あとは好きにそのフォルダ内のファイルを編集して構いません。**gitはフォルダ内を監視し、変更があれば自動的に検出**します。前回の状態からの「差分」を監視しているので、VSCodeを使わずに変更した内容でも問題なく検出してくれます。

試しにいくつかのファイルを編集し、保存してみてください。**変更されたファイルがある場合、その数が左メニューのソース管理ボタン上にバッジ(青丸内の小さな数字)で表示**されるはずです。

ソース管理画面を開くと、変更されたファイルの一覧が表示されており、クリックすると「ファイル名（作業ツリー）」という名前の新たなタブが開きます。このタブでは、変更内容が削除部分と追加部分が赤と緑で表示されています。右端には、変更があったファイル内の大まかな位置が表示されています。このタブを確認することで、前回からどこがどのように編集されたか、いつでも調べられるようになっています。

## 履歴の保存：ステージとコミット
gitでは変更履歴は自動で記録されず、必ず手動で変更履歴を保存する処理を行う必要があります。変更履歴を保存するには、以下の二つのステップを経ます。

1. **ステージ stage**:対象とする変更内容を選択する
1. **コミット commit**:簡単なタイトルを付けてステージした変更内容を記録する



![](rsc/koten2.png)

一旦この時点でファイルの変更履歴を残してみましょう。
この一つ一つの変更履歴自体も「コミット commit」と呼ばれます。
後はこの繰り返しです。

自動で保存されないのは一見不便に思うかもしれませんが、こうした設計となっているのは区切りの良い場所まで

## 履歴を見てみる

## 巻き戻す：リバート

## 良いコミットの区切り方
ある程度区切りが付くまで編集を行ったら、gitに変更履歴

コミット粒度が大きすぎると戻れない＝何かあったらここまで戻りたい！という単位でコミット
コミット粒度が小さすぎると細切れすぎて何をしたいのかわからない＝あとから振り返ったときに「変更の意図や目的」がわかる単位でコミット

## 履歴を調べる１：コミット間の差分
クリックするとバージョンを見ることができます。
二つのバージョンの差分を比較することもできます。

## 履歴を調べる２：ファイル毎の履歴


```{=html}
<div class="prev-next-link">
    <a class="prev-link" href="setup.html">
        <p class="prev-next-label">prev</p>
        <p>環境構築</p>
    </a>
    <a class="next-link" href="branch.html">
        <p class="prev-next-label">next</p>
        <p>ブランチ</p>
    </a>
</div>
```
