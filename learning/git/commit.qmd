---
title: コミットと変更履歴
format:
    html:
        toc: true
execute:
    eval: false
---

```{r}
#| echo: false
#| eval: false
"https://bonjin-ultra.com/take1.htm"
```

まずは、gitの基本的な操作である「変更履歴の記録」と「過去の履歴の確認」の操作について見ていきましょう。

## リポジトリの初期化
gitにおけるバージョン管理の単位はフォルダです。任意のフォルダを指定すると、そのフォルダ内の全てのファイルについてバージョン管理を行います。この**バージョン管理の単位を「リポジトリ」と呼びます**。通常は、プログラムごと、あるいはプロジェクトごとに一つのリポジトリを作ることが多いでしょう（裏を返すと、一つのプロジェクトに関連するファイルは全て一つのフォルダ内に収めることを想定している、とも言えます）。

**gitで新たなフォルダのバージョン管理を始めるには、そのフォルダにおいて「リポジトリの初期化」処理が必要**です。この操作は、新しいフォルダをバージョン管理の対象にするたびに一度だけ実行する処理です。

VSCodeでは、gitに関連した操作は左メニューにある、丸三つが線でつながれたマークの「ソース管理」アイコンから行います。操作は以下の通りです。

1. まず、VSCodeを使ってバージョン管理の対象とする[フォルダを開く](../vscode.qmd)。
1. 左メニューから「ソース管理」（丸三つが線でつながれたボタン）を開く。
1. ソース管理画面に表示されている「リポジトリを初期化する」ボタンを押すと、表示が「Branchの発行」と切り替わる。これで初期化完了。
    - git用にリポジトリがすでに初期化されている場合、ボタンは表示されない。

## ファイルの変更
リポジトリの初期化が済めば、あとは好きにそのフォルダ内のファイルを編集して構いません。**gitはフォルダ内を監視し、変更があれば自動的に検出**します。前回の状態からの「差分」を監視しているので、VSCodeを使わずに変更した内容でも問題なく検出してくれます。

試しにいくつかのファイルを編集し、保存してみてください。**変更されたファイルがある場合、ソース管理ボタン上に青いバッジで表示**されるはずです。バッジ中の数字は、変更されたファイルの数を表しています。

:::{.callout-note}
なお、保存されていない状態だとソース管理には表示されませんので、必ず保存できているか確認してください（ファイルタブの右端が通常の閉じるボタン×ではなく●となっていると未保存です）。

未保存のファイルがあると、左メニューのエクスプローラボタンの上に未保存のファイル数が青いバッジで表示されます。
:::

ソース管理の画面を開くと、変更されたファイルの一覧が表示されているはずです。クリックすると「ファイル名（作業ツリー）」という名前の新たなタブが開きます。このタブでは、変更内容が赤（削除）と緑（追加）で表示されています。右端には、ファイル全体の変更位置についてスクロールバーに重ねて同じく赤と緑で表示されています。

## 履歴の記憶：ステージとコミット
ファイルの編集が一通り済んだタイミングで、変更履歴を手動で記録する必要があります。この**履歴の記録は「ステージ」と「コミット」、二つの操作によって成り立っています**。

:::{.callout-note}
自動で履歴が記憶されないのは一見不便に思うかもしれませんが、これは編集中などの中途半端なタイミングで多数の履歴が残り、結果として後でどの履歴を確認すればよいか分からなくなるのを避けるためにこうした仕組みになっています。
:::

**「ステージ」は記録する変更内容を選択する操作です**。ソース管理画面には編集した全てのファイルが表示されますが、これら全ての変更を一度に記録する必要はなく、どの変更を記録するかまず選ぶわけです。

- **ステージする**には、「変更」にあるファイルに**オンマウスした際に右側に表示される「＋」マークをクリック**、または右クリックで表示される「変更をステージ」を選択します。これで、「ステージされている変更」にファイルが移動します。
- **ステージを取り消す場合**は、「ステージされている変更」にあるファイルに**オンマウスした際に右側に表示される「ー」マークをクリック**、または右クリックで表示される「変更のステージング解除」を選択します。これで、「変更」にファイルが戻ります。
- 全ファイルの変更をステージしたければ、「変更」の行自体にオンマウスした際に右側に表示される「＋」マークをクリック、または右クリックで表示される「すべての変更をステージ」を選択します。
- ファイル丸ごとではなく、各ファイルの内部の変更毎にステージすることもできます。ファイルをクリックして「ファイル名（作業ツリー）」タブを開き、変更したい行を選択後左側に表示される「＋」マークをクリックします。

記録したい内容をステージできたら、次に **「コミット」でgitに変更履歴として記録**します。この際、

## 変更の破棄

## 履歴を見てみる

## 巻き戻す：リバート

## 良いコミットの区切り方
ある程度区切りが付くまで編集を行ったら、gitに変更履歴

コミット粒度が大きすぎると戻れない＝何かあったらここまで戻りたい！という単位でコミット
コミット粒度が小さすぎると細切れすぎて何をしたいのかわからない＝あとから振り返ったときに「変更の意図や目的」がわかる単位でコミット

## 履歴を調べる１：コミット間の差分
クリックするとバージョンを見ることができます。
二つのバージョンの差分を比較することもできます。

## 履歴を調べる２：ファイル毎の履歴


```{=html}
<div class="prev-next-link">
    <a class="prev-link" href="setup.html">
        <p class="prev-next-label">prev</p>
        <p>環境構築</p>
    </a>
    <a class="next-link" href="branch.html">
        <p class="prev-next-label">next</p>
        <p>ブランチ</p>
    </a>
</div>
```
