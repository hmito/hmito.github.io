---
title: コミットと変更履歴
format:
  html:
    toc: true
execute: 
  eval: false
---

```{r}
#| echo: false
#| eval: false
"https://bonjin-ultra.com/take1.htm"
```

実際にgitの使い方を見ていきます。ここでは、竹取物語の執筆を例に実際に変更履歴を扱う操作を紹介していきます。

## リポジトリの初期化
gitはフォルダを一つの単位とし、そのフォルダ内のすべてのファイルについてバージョン管理を行います。このバージョン管理の単位をgitでは「リポジトリ」と呼びます。オンラインストレージサービスのようにアプリが指定するフォルダ内に入れる必要はなく、任意のフォルダをgitにバージョン管理させることができます。

**gitでのバージョン管理を始めるには、そのフォルダにおいて「リポジトリの初期化」処理が必要**です。この操作は、新しいフォルダを監視対象にするたびに一度だけ実行する処理です。

実際にやってみましょう。今回の例では「竹取物語」というフォルダを管理することにします。すでに、このフォルダの中には、すでに序文を書いた「一の段.md」ファイルがあります。

![](rsc/take1.png)

1. VSCodeを使ってこのフォルダをgitで管理する場合、まずこの[フォルダをVSCodeで開きます](../vscode.qmd)。

![](rsc/take2.png)

2. さてVSCodeでは、gitに関わる操作は左メニューにある丸三つが線でつながれた「ソース管理」の画面から行います。git用にリポジトリが初期化されていない場合、ソース管理画面には「リポジトリを初期化する」ボタンが表示されています。このボタンを押して表示が「Branchの発行」と切り替わったら初期化完了です。これでgitで履歴を管理する準備ができました。

## 変更の監視
リポジトリの初期化が済めば、あとは好きにそのフォルダ内のファイルを変更して構いません。**gitは常にフォルダ内を監視し、変更があれば自動的に検出**します。前回の状態からの「差分」を監視しているので、VSCodeを使わずに変更した内容でも問題なく検出してくれます。

実際にやってみましょう。エクスプローラ（左メニュー最上部のファイルマーク）に戻って、まずは「竹取物語.md」に竹取物語の序章を記述してみます。

![](rsc/koten1.png)

**変更されたファイルがある場合、その数が左メニューのソース管理ボタン上にバッジ(青丸内の小さな数字)で表示**されます。ソース管理画面を開くと、変更されたファイルの一覧が表示されており、クリックすると「ファイル名（作業ツリー）」という名前の新たなタブが開きます。

そうすると、左メニューの「ソース管理」ボタンに [1] と書かれたバッジが付きます。ソース管理に戻ると変更されたファイルとして「竹取物語.md」が表示されています。このように、**gitは常にフォルダ内を監視し変更があれば自動的に検出**します。

削除が赤、追加が緑で変更内容が表示されています。右端には、変更があったファイル内の大まかな位置が表示されており、これを頼りにファイル全体の変更内容を調べることができます。

## 履歴の保存：ステージとコミット
gitでは変更履歴は自動で記録されず、必ず手動で変更履歴を保存する処理を行う必要があります。変更履歴を保存するには、以下の二つのステップを経ます。

1. **ステージ stage**:対象とする変更内容を選択する
1. **コミット commit**:簡単なタイトルを付けてステージした変更内容を記録する



![](rsc/koten2.png)

一旦この時点でファイルの変更履歴を残してみましょう。
この一つ一つの変更履歴自体も「コミット commit」と呼ばれます。
後はこの繰り返しです。

自動で保存されないのは一見不便に思うかもしれませんが、こうした設計となっているのは区切りの良い場所まで

## 履歴を見てみる

## 巻き戻す：リバート

## 良いコミットの区切り方
ある程度区切りが付くまで編集を行ったら、gitに変更履歴

コミット粒度が大きすぎると戻れない＝何かあったらここまで戻りたい！という単位でコミット
コミット粒度が小さすぎると細切れすぎて何をしたいのかわからない＝あとから振り返ったときに「変更の意図や目的」がわかる単位でコミット

## 履歴を調べる１：コミット間の差分
クリックするとバージョンを見ることができます。
二つのバージョンの差分を比較することもできます。

## 履歴を調べる２：ファイル毎の履歴


```{=html}
<div class="prev-next-link">
  <a class="prev-link" href="setup.html">
    <p class="prev-next-label">prev</p>
    <p>環境構築</p>
  </a>
  <a class="next-link" href="branch.html">
    <p class="prev-next-label">next</p>
    <p>ブランチ</p>
  </a>
</div>
```
